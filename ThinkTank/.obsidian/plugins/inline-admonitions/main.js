/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => InlineAdmonitionPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian7 = require("obsidian");

// src/settings/inlineAdmonitionSettingTab.ts
var import_obsidian6 = require("obsidian");

// src/settings/editInlineAdmonitionModal.ts
var import_obsidian5 = require("obsidian");

// src/utils.ts
function slugify(str) {
  return String(str).normalize("NFKD").replace(/[\u0300-\u036f]/g, "").trim().toLowerCase().replace(/[^a-z0-9 -]/g, "").replace(/\s+/g, "-").replace(/-+/g, "-");
}

// node_modules/uuid/dist/esm-browser/rng.js
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  if (!getRandomValues) {
    getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);
    if (!getRandomValues) {
      throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
  }
  return getRandomValues(rnds8);
}

// node_modules/uuid/dist/esm-browser/stringify.js
var byteToHex = [];
for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 256).toString(16).slice(1));
}
function unsafeStringify(arr, offset = 0) {
  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];
}

// node_modules/uuid/dist/esm-browser/native.js
var randomUUID = typeof crypto !== "undefined" && crypto.randomUUID && crypto.randomUUID.bind(crypto);
var native_default = {
  randomUUID
};

// node_modules/uuid/dist/esm-browser/v4.js
function v4(options, buf, offset) {
  if (native_default.randomUUID && !buf && !options) {
    return native_default.randomUUID();
  }
  options = options || {};
  const rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return unsafeStringify(rnds);
}
var v4_default = v4;

// src/InlineAdmonitions/inlineAdmonition.ts
var InlineAdmonition = class {
  constructor(backgroundColor, color, slug) {
    this.toString = () => {
      return "InlineAdmonition(" + this.backgroundColor + ", " + this.type + ")";
    };
    this.backgroundColor = backgroundColor;
    this.color = color;
    this.slug = slug;
  }
  copySettingsTo(other) {
    other.backgroundColor = this.backgroundColor;
    other.color = this.color;
  }
  static generateSlug() {
    return v4_default();
  }
};

// src/InlineAdmonitions/prefixInlineAdmonition.ts
var import_obsidian4 = require("obsidian");

// src/InlineAdmonitions/suffixInlineAdmonition.ts
var import_obsidian = require("obsidian");
var SuffixInlineAdmonition = class extends InlineAdmonition {
  constructor(suffix, hideTriggerString, backgroundColor, color, slug) {
    super(backgroundColor, color, slug);
    this.type = "suffix" /* Suffix */;
    this.toString = () => {
      return "SuffixInlineAdmonition(" + this.suffix + ", hidePrefix: " + this.hideTriggerString + ")";
    };
    this.suffix = suffix;
    this.hideTriggerString = hideTriggerString;
  }
  // TODO - I dont like this...
  static create() {
    return new SuffixInlineAdmonition(
      "",
      false,
      "#f1f1f1",
      "#000000",
      InlineAdmonition.generateSlug()
    );
  }
  static unmarshal(data) {
    if (data.type != "suffix" /* Suffix */) {
      throw new Error("Cannot unmarshal data into SuffixInlineAdmonition: Wrong type: " + data.type);
    }
    return new SuffixInlineAdmonition(
      data.suffix,
      data.hideTriggerString,
      data.backgroundColor,
      data.color,
      data.slug
    );
  }
  process(codeElement) {
    if (codeElement.innerText.endsWith(this.suffix)) {
      codeElement.classList.add("iad");
      codeElement.classList.add("iad-suffix-" + slugify(this.suffix));
      codeElement.setAttribute("style", `background-color: ${this.backgroundColor}; color: ${this.color};`);
      if (this.hideTriggerString) {
        codeElement.setText(codeElement.getText().replace(new RegExp(this.suffix + "$"), ""));
      }
    }
  }
  sampleText() {
    if (this.hideTriggerString) {
      return "sample text";
    }
    return "sample text " + this.suffix;
  }
  buildSettings(contentEl, updateSampleFunction) {
    let results = new Array();
    results.push(new import_obsidian.Setting(contentEl).setName("Suffix").setDesc("Inline codeblock suffix to trigger this formatting").addText(
      (text) => text.setPlaceholder("Enter suffix").setValue(this.suffix).onChange((value) => {
        this.suffix = value;
        updateSampleFunction();
      })
    ));
    results.push(
      new import_obsidian.Setting(contentEl).setName("Hide suffix text").setDesc("If enabled, the 'suffix' text will not show in resulting Inline Admonition").addToggle(
        (toggle) => toggle.setValue(this.hideTriggerString).onChange((val) => {
          this.hideTriggerString = val;
          updateSampleFunction();
        })
      )
    );
    return results;
  }
};

// src/InlineAdmonitions/containsInlineAdmonition.ts
var import_obsidian2 = require("obsidian");
var ContainsInlineAdmonition = class extends InlineAdmonition {
  constructor(contains, backgroundColor, color, slug) {
    super(backgroundColor, color, slug);
    this.type = "contains" /* Contains */;
    this.toString = () => {
      return "ContainsInlineAdmonition(" + this.contains + ")";
    };
    this.contains = contains;
  }
  // TODO - I dont like this...
  static create() {
    return new ContainsInlineAdmonition("", "#f1f1f1", "#000000", InlineAdmonition.generateSlug());
  }
  static unmarshal(data) {
    if (data.type != "contains" /* Contains */) {
      throw new Error("Cannot unmarshal data into ContainsInlineAdmonition: Wrong type: " + data.type);
    }
    return new ContainsInlineAdmonition(data.contains, data.backgroundColor, data.color, data.slug);
  }
  process(codeElement) {
    if (codeElement.innerText.contains(this.contains)) {
      codeElement.classList.add("iad");
      codeElement.classList.add("iad-contains-" + slugify(this.contains));
      codeElement.setAttribute(
        "style",
        `background-color: ${this.backgroundColor};color: ${this.color}`
      );
    }
  }
  sampleText() {
    return "sample " + this.contains + " text";
  }
  buildSettings(contentEl, updateSampleFunction) {
    let results = new Array();
    results.push(new import_obsidian2.Setting(contentEl).setName("Contains").setDesc("Inline codeblock contains this string to trigger this formatting").addText(
      (text) => text.setPlaceholder("Enter contains").setValue(this.contains).onChange((value) => {
        this.contains = value;
        updateSampleFunction();
      })
    ));
    return results;
  }
};

// src/InlineAdmonitions/inlineAdmonitionType.ts
var import_obsidian3 = require("obsidian");
var InlineAdmonitionType = /* @__PURE__ */ ((InlineAdmonitionType2) => {
  InlineAdmonitionType2["Prefix"] = "prefix";
  InlineAdmonitionType2["Suffix"] = "suffix";
  InlineAdmonitionType2["Contains"] = "contains";
  InlineAdmonitionType2[InlineAdmonitionType2["tooltip"] = void 0] = "tooltip";
  return InlineAdmonitionType2;
})(InlineAdmonitionType || {});
((InlineAdmonitionType2) => {
  function create(type) {
    switch (type) {
      case "prefix" /* Prefix */:
        return PrefixInlineAdmonition.create();
      case "suffix" /* Suffix */:
        return SuffixInlineAdmonition.create();
      case "contains" /* Contains */:
        return ContainsInlineAdmonition.create();
      default:
        throw new Error("Cannot create, invalid Inline Admonition type");
    }
  }
  InlineAdmonitionType2.create = create;
  function from(type) {
    switch (type) {
      case "prefix" /* Prefix */:
        return "prefix" /* Prefix */;
      case "suffix" /* Suffix */:
        return "suffix" /* Suffix */;
      case "contains" /* Contains */:
        return "contains" /* Contains */;
      default:
        throw new Error("Invalid Inline Admonition type: " + type);
    }
  }
  InlineAdmonitionType2.from = from;
  function createFrom(type) {
    return create(from(type));
  }
  InlineAdmonitionType2.createFrom = createFrom;
  function unmarshal(data) {
    let type = from(data.type);
    switch (type) {
      case "prefix" /* Prefix */:
        return PrefixInlineAdmonition.unmarshal(data);
      case "suffix" /* Suffix */:
        return SuffixInlineAdmonition.unmarshal(data);
      case "contains" /* Contains */:
        return ContainsInlineAdmonition.unmarshal(data);
      default:
        throw new Error("Cannot Unmarshal, invalid Inline Admonition type: " + type);
    }
  }
  InlineAdmonitionType2.unmarshal = unmarshal;
  function tooltip() {
    return `
The "type" defines what triggers an Inline Admonition
		
 - Prefix: Triggered if a codeblock starts with the string.
 - Suffix: Triggered if a codeblock ends with the string.
 - Contains: Triggered if a codeblock contains the string anywhere within it.
 `;
  }
  InlineAdmonitionType2.tooltip = tooltip;
})(InlineAdmonitionType || (InlineAdmonitionType = {}));
var TypeTooltipModal = class extends import_obsidian3.Modal {
  onOpen() {
    super.onOpen();
    let { contentEl } = this;
    contentEl.createDiv({
      text: InlineAdmonitionType.tooltip(),
      attr: { "style": "white-space: pre-wrap;" }
    });
  }
};

// src/InlineAdmonitions/prefixInlineAdmonition.ts
var PrefixInlineAdmonition = class extends InlineAdmonition {
  constructor(prefix, hideTriggerString, backgroundColor, color, slug) {
    super(backgroundColor, color, slug);
    this.type = "prefix" /* Prefix */;
    this.toString = () => {
      return "PrefixInlineAdmonition(" + this.prefix + ", hidePrefix: " + this.hideTriggerString + ")";
    };
    this.prefix = prefix;
    this.hideTriggerString = hideTriggerString;
  }
  // TODO - I dont like this...
  static create() {
    return new PrefixInlineAdmonition(
      "",
      false,
      "#f1f1f1",
      "#000000",
      InlineAdmonition.generateSlug()
    );
  }
  static unmarshal(data) {
    if (data.type != "prefix" /* Prefix */) {
      throw new Error("Cannot unmarshal data into PrefixInlineAdmonition: Wrong type: " + data.type);
    }
    return new PrefixInlineAdmonition(
      data.prefix,
      data.hideTriggerString,
      data.backgroundColor,
      data.color,
      data.slug
    );
  }
  process(codeElement) {
    if (codeElement.innerText.startsWith(this.prefix)) {
      codeElement.classList.add("iad");
      codeElement.classList.add("iad-prefix-" + slugify(this.prefix));
      codeElement.setAttribute("style", `background-color: ${this.backgroundColor}; color: ${this.color};`);
      if (this.hideTriggerString) {
        codeElement.setText(codeElement.getText().replace(this.prefix, ""));
      }
    }
  }
  sampleText() {
    if (this.hideTriggerString) {
      return "sample text";
    }
    return this.prefix + " sample text";
  }
  buildSettings(contentEl, updateSampleFunction) {
    let results = new Array();
    results.push(new import_obsidian4.Setting(contentEl).setName("Prefix").setDesc("Inline codeblock prefix to trigger this formatting").addText(
      (text) => text.setPlaceholder("Enter prefix").setValue(this.prefix).onChange((value) => {
        this.prefix = value;
        updateSampleFunction();
      })
    ));
    results.push(
      new import_obsidian4.Setting(contentEl).setName("Hide prefix text").setDesc("If enabled, the 'prefix' text will not show in resulting Inline Admonition").addToggle(
        (toggle) => toggle.setValue(this.hideTriggerString).onChange((val) => {
          this.hideTriggerString = val;
          updateSampleFunction();
        })
      )
    );
    return results;
  }
};

// src/settings/editInlineAdmonitionModal.ts
var EditInlineAdmonitionModal = class extends import_obsidian5.Modal {
  constructor(app, toEdit, onSubmit) {
    super(app);
    this.typeSettings = new Array();
    this.result = toEdit ? toEdit : PrefixInlineAdmonition.create();
    this.onSubmit = onSubmit;
  }
  static edit(app, toEdit, onSubmit) {
    return new EditInlineAdmonitionModal(app, toEdit, onSubmit);
  }
  static new(app, onSubmit) {
    return new EditInlineAdmonitionModal(app, PrefixInlineAdmonition.create(), onSubmit);
  }
  onOpen() {
    let { contentEl } = this;
    contentEl.createEl("br");
    let submitSetting = new import_obsidian5.Setting(contentEl).addButton((btn) => btn.setButtonText("Submit").setCta().onClick(() => {
      this.close();
      this.onSubmit(this.result);
    }));
    this.sample = submitSetting.nameEl.createEl("code", {
      text: this.result.sampleText(),
      cls: "iad iad-sample iad-sample-editor iad-" + this.result.slug,
      attr: { "style": `background-color: ${this.result.backgroundColor}; color: ${this.result.color};` }
    });
    new import_obsidian5.Setting(contentEl).setName("Background color").setDesc("Color of the background of the inline admonition").addColorPicker(
      (cp) => cp.setValue(this.result.backgroundColor).onChange((val) => {
        this.result.backgroundColor = val;
        this.updateSample();
      })
    );
    new import_obsidian5.Setting(contentEl).setName("Text color").setDesc("Color of the text of the inline admonition").addColorPicker(
      (cp) => cp.setValue(this.result.color).onChange((val) => {
        this.result.color = val;
        this.updateSample();
      })
    );
    new import_obsidian5.Setting(contentEl).setName("Type").setDesc("The way the Inline Admonition is triggered").setTooltip(InlineAdmonitionType.tooltip()).addDropdown((dc) => dc.addOption("prefix" /* Prefix */, "prefix" /* Prefix */).addOption("suffix" /* Suffix */, "suffix" /* Suffix */).addOption("contains" /* Contains */, "contains" /* Contains */).setValue(this.result.type).onChange((value) => {
      this.clearTypeSettings();
      let old = this.result;
      this.result = InlineAdmonitionType.createFrom(value);
      old.copySettingsTo(this.result);
      this.appendTypeSettings(contentEl);
    })).addButton(
      (btn) => btn.setIcon("help-circle").onClick(() => {
        new TypeTooltipModal(this.app).open();
      })
    );
    this.appendTypeSettings(contentEl);
  }
  updateSample() {
    this.sample.setText(this.result.sampleText());
    this.sample.setAttr("style", `background-color: ${this.result.backgroundColor}; color: ${this.result.color}; margin: 0.5em;`);
  }
  clearTypeSettings() {
    this.typeSettings.forEach((value) => value.settingEl.remove());
  }
  appendTypeSettings(contentEl) {
    this.typeSettings = this.result.buildSettings(contentEl, () => this.updateSample());
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
};

// src/settings/inlineAdmonitionSettingTab.ts
var InlineAdmonitionSettingTab = class extends import_obsidian6.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian6.Setting(containerEl).addButton((b) => b.setButtonText("Create new inline admonition").onClick(async (evt) => {
      EditInlineAdmonitionModal.new(this.app, async (result) => {
        this.plugin.settings.inlineAdmonitions.set(result.slug, result);
        await this.plugin.saveSettings();
        this.rebuildSettingRows(containerEl);
      }).open();
    }));
    this.rebuildSettingRows(containerEl);
  }
  // Renders the "samples" with options in the main settings view
  rebuildSettingRows(containerEl) {
    containerEl.findAll(".iad-setting-row").forEach((e) => e.remove());
    new Map([...this.plugin.settings.inlineAdmonitions].sort()).forEach((iad, identifier) => {
      this.displaySampleIAD(containerEl, iad, identifier);
    });
  }
  // Renders a single Inline Admonition "sample" with options
  displaySampleIAD(containerEl, iad, identifier) {
    let row = containerEl.createDiv();
    row.addClass("iad-setting-row");
    row.createSpan({
      text: iad.type + " Type",
      cls: "iad-setting-row-title"
    });
    row.createEl("code", {
      text: iad.sampleText(),
      cls: "iad iad-sample iad-" + iad.slug,
      parent: row,
      attr: { "style": `background-color: ${iad.backgroundColor}; color: ${iad.color}; margin: 0.5em;` }
    });
    let editButton = row.createEl("button", { text: "Edit" });
    editButton.addEventListener("click", (evt) => {
      EditInlineAdmonitionModal.edit(this.app, iad, async (result) => {
        this.plugin.settings.inlineAdmonitions.delete(identifier);
        this.plugin.settings.inlineAdmonitions.set(result.slug, result);
        await this.plugin.saveSettings();
        this.rebuildSettingRows(containerEl);
      }).open();
    });
    let deleteButton = row.createEl("button", { text: "Delete" });
    deleteButton.addEventListener("click", async (evt) => {
      this.plugin.settings.inlineAdmonitions.delete(identifier);
      await this.plugin.saveSettings();
      row.remove();
    });
  }
};

// src/settings/inlineAdmonitionsPostProcessor.ts
var InlineAdmonitionsPostProcessor = class {
  constructor(settings) {
    this.settings = settings;
  }
  postProcess(element, context) {
    element.findAll("code").forEach((codeblock) => {
      this.settings.inlineAdmonitions.forEach((iad) => iad.process(codeblock));
    });
  }
};

// src/settings/inlineAdmonitionSettings.ts
var InlineAdmonitionSettingsIO;
((InlineAdmonitionSettingsIO2) => {
  function marshal(settings) {
    let settingData = Object.assign({}, DEFAULT_SETTINGS, settings);
    settingData.inlineAdmonitions = Object.fromEntries(settings.inlineAdmonitions.entries());
    return settingData;
  }
  InlineAdmonitionSettingsIO2.marshal = marshal;
  function unmarshalAndMigrate(data) {
    let settings = Object.assign({}, DEFAULT_SETTINGS, data);
    let [newSettings, dataMigrated] = migrateData(settings);
    settings = newSettings;
    console.log(newSettings);
    let iads = /* @__PURE__ */ new Map();
    for (const identifier in settings.inlineAdmonitions) {
      let iad = settings.inlineAdmonitions[identifier];
      let typedIAD = InlineAdmonitionType.unmarshal(iad);
      iads.set(typedIAD.slug, typedIAD);
    }
    settings.inlineAdmonitions = iads;
    return [settings, dataMigrated];
  }
  InlineAdmonitionSettingsIO2.unmarshalAndMigrate = unmarshalAndMigrate;
  function migrateData(settings) {
    let dataMigrated = false;
    if (settings.version == void 0 || settings.version === 0) {
      console.log("[Inline Admonitions] Migrating settings from version 0 to 1");
      let iads = /* @__PURE__ */ new Map();
      for (const identifier in settings == null ? void 0 : settings.inlineAdmonitions) {
        let iad = settings.inlineAdmonitions[identifier];
        if (iad.type === void 0) {
          console.log("[Inline Admonitions] Setting InlineAdmonition " + identifier + " to Prefix type");
          iad.type = "prefix" /* Prefix */;
        }
        if (iad.slug === void 0) {
          iad.slug = InlineAdmonition.generateSlug();
        }
        let ia = InlineAdmonitionType.unmarshal(iad);
        iads.set(ia.slug, ia);
      }
      settings.inlineAdmonitions = iads;
      settings["mySetting"] = void 0;
      settings.version = 1;
      dataMigrated = true;
    }
    if (settings.version === 1) {
      console.log("[Inline Admonitions] Migrating settings from version 1 to 2");
      for (const identifier in settings == null ? void 0 : settings.inlineAdmonitions) {
        console.log(identifier);
        let iad = settings.inlineAdmonitions[identifier];
        console.log(iad);
        if (iad.type === "prefix" && !iad.hasOwnProperty("hideTriggerString")) {
          iad.hideTriggerString = false;
        }
        if (iad.type === "suffix" && !iad.hasOwnProperty("hideTriggerString")) {
          iad.hideTriggerString = false;
        }
        settings.inlineAdmonitions[identifier] = iad;
      }
      settings.version = 2;
      dataMigrated = true;
    }
    return [settings, dataMigrated];
  }
  InlineAdmonitionSettingsIO2.migrateData = migrateData;
})(InlineAdmonitionSettingsIO || (InlineAdmonitionSettingsIO = {}));
var DEFAULT_SETTINGS = {
  version: 0,
  inlineAdmonitions: /* @__PURE__ */ new Map()
};

// main.ts
var InlineAdmonitionPlugin = class extends import_obsidian7.Plugin {
  async onload() {
    console.log("Loading Inline Admonitions.");
    await this.loadSettings();
    this.registerMarkdownPostProcessor((element, context) => {
      new InlineAdmonitionsPostProcessor(this.settings).postProcess(element, context);
    });
    this.addSettingTab(new InlineAdmonitionSettingTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    let settingData = await this.loadData();
    let [settings, dataMigrated] = InlineAdmonitionSettingsIO.unmarshalAndMigrate(settingData);
    this.settings = settings;
    if (dataMigrated) {
      await this.saveSettings();
    }
  }
  async saveSettings() {
    const settingData = InlineAdmonitionSettingsIO.marshal(this.settings);
    await this.saveData(settingData);
    this.rerenderMarkdownViews();
  }
  rerenderMarkdownViews() {
    const view = this.app.workspace.getActiveViewOfType(import_obsidian7.MarkdownView);
    view == null ? void 0 : view.previewMode.rerender(true);
  }
};
//# sourceMappingURL=data:application/json;base64,
